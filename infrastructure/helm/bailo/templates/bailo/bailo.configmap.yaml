---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "bailo.fullname" . }}-config
  labels:
    {{- include "bailo.labels" . | nindent 4 }}
data:
  production.cjs: |
    module.exports = {
      api: {
        // Publicly accessible host
        host: '',

        // Port to listen on
        port: {{ .Values.service.backendPort }},
      },

      app: {
        // Publicly accessible route to service
        protocol: '{{ .Values.config.app.protocol }}',
        host: '{{ .Values.route.appPublicRoute }}',
        port: {{ .Values.config.app.port }},

        // Typically generated from `npm run certs`
        privateKey: '/app/certs/key.pem',
        publicKey: '/app/certs/cert.pem',
      },

      s2i: {
        path: '/s2i/s2i',
      },

      build: {
        // Environment to build in, can be 'img' or 'openshift'
        environment: '{{ .Values.config.build.environment }}',

        // These settings only matter in OpenShift
        openshift: {
          // Build configs, secrets and builds will be triggered in this namespace
          namespace: '{{ .Values.openshift.namespace }}',
          // The name of the secret for the application to create to securely allow OpenShift to communicate with the Bailo registry
          dockerPushSecret: '{{ .Values.openshift.dockerPushSecretName }}',
        },
      },

      mongo: {
        // A mongo connection URI, can contain usernames, passwords, replica set information, etc.
        // See: https://www.mongodb.com/docs/manual/reference/connection-string/
        uri: 'OVERWRITTEN_BY_ENVIRONMENT_VARIABLE',

        connectionOptions: {
          useFindAndModify: false,
          useNewUrlParser: true,
          useUnifiedTopology: true,
          useCreateIndex: true,
          ssl: {{ .Values.mongodb.ssl }},
          sslValidate: {{ .Values.mongodb.sslValidate }},
        },
      },

      minio: {
        // Connection information for an s3-compliant file store.  Settings are passed directly to 'minio', see reference for options:
        // https://min.io/docs/minio/linux/developers/javascript/API.html#constructor
        connection: {
          endPoint: '{{ include "bailo.minio.host" . }}',
          port: {{ .Values.minio.service.ports.api }},
          useSSL: {{ .Values.minio.useSSL }},
          accessKey: 'OVERWRITTEN_BY_ENVIRONMENT_VARIABLE',
          secretKey: 'OVERWRITTEN_BY_ENVIRONMENT_VARIABLE',
          region: '{{ .Values.minio.region }}',
          partSize: {{ .Values.minio.partSizeMB }} * 1024 * 1024,
        },

        // Automatically create the upload / registry bucket if they're not found?
        automaticallyCreateBuckets: {{ .Values.minio.createBuckets }},

        // Names of buckets that Bailo uses
        buckets: {
          uploads: '{{ .Values.minio.uploadBucket }}',
          registry: '{{ .Values.minio.registryBucket }}',
        },
      },

      registry: {
        connection:{
          // This is explicitly NOT using connection.protocol, as this should always be
          // the internal registry address which is guarenteed to be https.
          internal: 'https://{{ include "bailo.registry.host" . }}:{{ .Values.registry.port }}',
          host: '{{ include "bailo.registry.host" . }}:{{ .Values.registry.port }}',
          port: '{{ .Values.registry.port }}',
          protocol: '{{ .Values.registry.protocol }}',
          insecure: {{ .Values.registry.insecure }},
        },

        // Service and Issuer must match those set in the registry configuration
        service: 'RegistryAuth',
        issuer: 'RegistryIssuer',

        // Allow self-signed certificates
        insecure: {{ .Values.registry.insecure }},
      },

      smtp: {
        // Enable / disable all email sending
        enabled: true,

        // Connection information for an SMTP server.  Settings are passed directly to 'node-mailer', see reference for options:
        // https://nodemailer.com/smtp/#1-single-connection
        connection: {
          host: '{{ include "bailo.mail.host" . }}',
          port: {{ .Values.config.smtp.port }},
          secure: {{ .Values.config.smtp.secure }},
          auth: {
            user: '{{ .Values.config.smtp.user }}',
            pass: '{{ .Values.config.smtp.pass }}',
          },
          tls: {
            rejectUnauthorized: {{ .Values.config.smtp.rejectUnauthorized }},
          },
        },

        // Set the email address that Bailo should use, can be different from the SMTP server details.
        from: '{{ .Values.config.smtp.from }}',
      },

      logging: {
        // Log out to a file
        file: {
          enabled: false,
          level: 'info',
          path: './logs/out.log',
        },

        // Log out to a stroom instance
        stroom: {
          enabled: {{ .Values.stroom.enabled }},
          folder: '{{ .Values.stroom.folder }}',
          url: '{{ .Values.stroom.url }}',
          feed: '{{ .Values.stroom.feed }}',
          environment: '{{ .Values.stroom.environment }}',
          system: '{{ .Values.stroom.system }}',
          insecure: {{ .Values.stroom.insecure }},
          interval: {{ .Values.stroom.interval }},
        },
      },

      session: {
        secret: '{{ .Values.cookie.secret }}',
      },

      oauth: {
        enabled: {{ .Values.oauth.enabled }},
        provider: 'cognito',

        grant: {
          // Grant configuration options, provide any option from:
          // https://www.npmjs.com/package/grant
          defaults: {
            origin: '{{ .Values.oauth.origin }}',
          },

          cognito: {
            key: '{{ .Values.oauth.cognito.key }}',
            secret: '{{ .Values.oauth.cognito.secret }}',
            dynamic: {{ .Values.oauth.cognito.dynamic }},
            response: {{ .Values.oauth.cognito.response }},
            callback: '{{ .Values.oauth.cognito.callback }}',
            subdomain: '{{ .Values.oauth.cognito.subdomain }}',
          },
        },
      },

      // These settings are PUBLIC and shared with the UI
      ui: {
        // Show a banner at the top of the screen on all pages
        banner: {
          enabled: {{ .Values.config.ui.banner.enabled }},
          text: '{{ .Values.config.ui.banner.text }}',
          colour: '{{ .Values.config.ui.banner.colour }}',
        },

        // Contact details for the support team
        issues: {
          label: 'Bailo Support Team',
          supportHref: 'mailto:{{ .Values.config.supportEmail }}?subject=Bailo%20Support',
          contactHref: 'mailto:{{ .Values.config.supportEmail }}?subject=Bailo%20Contact',
        },

        // The publicly accessible location of the registry, including host and port
        registry: {
          host: '{{ .Values.route.appPublicRoute }}',
        },

        // A configurable checkbox on the last page when uploading a model
        uploadWarning: {
          showWarning: true,
          checkboxText: 'By checking here you confirm that the information is correct',
        },

        // A configurable checkbox on the last page when requesting a deployment
        deploymentWarning: {
          showWarning: true,
          checkboxText: 'By checking here you confirm that the information is correct',
        },

        // The available seldon versions that can be used to build images
        seldonVersions: [
          {
            name: '{{ .Values.config.s2i.name }}',
            image: '{{ .Values.config.s2i.image }}',
          },
        ],

        maxModelSizeGB: 50,
      },

      experimental: {
        v2: {{ .Values.config.experimental.v2 }},
      },

      connectors: {
        authentication: {
          kind: '{{ .Values.connectors.authentication.kind }}',
        },

        authorisation: {
          kind: '{{ .Values.connectors.authorisation.kind }}',
        },
      },

      log: {
        level: 'trace',
      },

      s3: {
        credentials: {
          accessKeyId: 'OVERWRITTEN_BY_ENVIRONMENT_VARIABLE',
          secretAccessKey: 'OVERWRITTEN_BY_ENVIRONMENT_VARIABLE',
        },

        endpoint: '{{ ternary "https" "http" (eq .Values.minio.useSSL true)}}://{{ include "bailo.minio.host" . }}:{{ .Values.minio.service.ports.api }}',
        region: '{{ .Values.minio.region }}',
        forcePathStyle: true,

        // Names of buckets that Bailo uses
        buckets: {
          uploads: '{{ .Values.minio.uploadBucket }}',
          registry: '{{ .Values.minio.registryBucket }}',
        },
      },
    }

  custom-environment-variables.cjs: |
    module.exports = {
      minio: {
        connection: {
          accessKey: 'MINIO_ACCESS_KEY',
          secretKey: 'MINIO_SECRET_KEY',
        },
      },
      mongo: {
        uri: 'MONGO_CONNECTION_URI',
      },
      s3: {
        credentials: {
          accessKeyId: 'MINIO_ACCESS_KEY',
          secretAccessKey: 'MINIO_SECRET_KEY',
        },
      },
    }
