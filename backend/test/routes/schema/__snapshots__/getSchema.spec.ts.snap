// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`routes > schema > getSchema > returns the schema with the matching ID 1`] = `
{
  "schema": {
    "active": true,
    "createdAt": "2023-07-28T10:50:00.928Z",
    "description": "This is a description of the schema.",
    "hidden": false,
    "id": "example-model-schema-1",
    "kind": "model",
    "meta": {
      "example": true,
    },
    "name": "Example Schema 1",
    "schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "definitions": {
        "entity": {
          "properties": {
            "id": {
              "description": "Unique identifier for entity.",
              "type": "string",
            },
            "kind": {
              "description": "Type of entity (user, group).",
              "type": "string",
            },
          },
          "type": "object",
        },
      },
      "properties": {
        "anotherPage": {
          "description": "This is a second page",
          "properties": {
            "questionOne": {
              "description": "This is a question",
              "title": "Question one",
              "type": "string",
              "widget": "customTextInput",
            },
            "questionTwo": {
              "description": "This is another question",
              "title": "Question two",
              "type": "string",
              "widget": "customTextInput",
            },
          },
          "required": [
            "questionOne, questionTwo",
          ],
          "title": "Another Page",
          "type": "object",
        },
        "contacts": {
          "additionalProperties": false,
          "description": "Details of those individuals responsible for the model, the detail in this card and the risk involved in using the model and its continued alignment with policy.",
          "properties": {
            "manager": {
              "description": "A senior member of staff responsible for owning the ML model, associated legal, ethical and operational risk, and ensuring that the ML Model and its use is compliant with policy.",
              "items": {
                "$ref": "#/definitions/entity",
              },
              "minLength": 1,
              "title": "Senior Responsible Officer",
              "type": "array",
              "widget": "entitySelector",
            },
            "reviewer": {
              "description": "An experienced data scientist, responsible for reviewing and checking technical information added to the model card by the Model Developer before approving the model for operational use.",
              "items": {
                "$ref": "#/definitions/entity",
              },
              "minLength": 1,
              "title": "Model Technical Reviewer",
              "type": "array",
              "widget": "entitySelector",
            },
            "uploader": {
              "description": "The individual who develops or leads the technical development of the ML model and implementation of ongoing technical actions highlighted in the model card.",
              "items": {
                "$ref": "#/definitions/entity",
              },
              "minLength": 1,
              "title": "Model Developer",
              "type": "array",
              "widget": "entitySelector",
            },
          },
          "required": [
            "uploader",
            "reviewer",
            "manager",
          ],
          "title": "Contacts",
          "type": "object",
        },
        "highLevelDetails": {
          "additionalProperties": false,
          "description": "Summary of the model functionality.",
          "properties": {
            "modelCardVersion": {
              "maxLength": 100,
              "pattern": "^[a-zA-Z0-9\\\\_\\\\-\\\\.]{0,128}$",
              "title": "Model version",
              "type": "string",
              "widget": "customTextInput",
            },
            "modelInASentence": {
              "description": "This sentence will allow an individual to decide if they want to open the model card to read further Example: 'Takes Arabic text snippet inputs and outputs an English translation.'",
              "maxLength": 140,
              "minLength": 1,
              "title": "Summarise the model in a sentence",
              "type": "string",
              "widget": "customTextInput",
            },
            "modelOverview": {
              "description": "A description of what the model does.",
              "maxLength": 5000,
              "minLength": 1,
              "title": "What does the model do?",
              "type": "string",
              "widget": "customTextInput",
            },
            "name": {
              "description": "This should be descriptive name, such as 'Arabic - English Translation', and will be visible in the model marketplace.",
              "maxLength": 140,
              "minLength": 1,
              "title": "Name of the Machine Learning Model",
              "type": "string",
              "widget": "customTextInput",
            },
            "tags": {
              "description": "These tags will be searchable and will help others find this model.",
              "items": {
                "type": "string",
              },
              "title": "Descriptive tags for the model.",
              "type": "array",
              "uniqueItems": true,
              "widget": "tagSelector",
            },
          },
          "required": [
            "name",
            "modelInASentence",
            "modelOverview",
            "modelCardVersion",
            "tags",
          ],
          "title": "Overview",
          "type": "object",
        },
        "id": {
          "type": "string",
        },
        "schemaRef": {
          "title": "Schema reference",
          "type": "string",
        },
        "timeStamp": {
          "format": "date-time",
          "type": "string",
        },
      },
      "required": [
        "timeStamp",
        "highLevelDetails",
        "anotherPage",
      ],
      "type": "object",
    },
    "uiSchema": {
      "UI Schema field 1": "field 1 info",
    },
    "updatedAt": "2023-07-28T10:50:00.928Z",
  },
}
`;

exports[`routes > schema > getSchema > returns the schema with the matching ID 2`] = `
{
  "error": {
    "message": "Schema not found.",
    "name": "Error",
  },
}
`;
