apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "bailo.fullname" . }}
  labels:
    {{- include "bailo.labels" . | nindent 4 }}
data:
  registry.conf: |
    version: 0.1
    log:
      level: debug
      fields:
        service: registry
    storage:
      cache:
        blobdescriptor: inmemory
      s3:
        regionendpoint: http://{{ include "bailo.minio.host" . }}:{{ .Values.minio.service.ports.api }}
        bucket: {{ .Values.minio.registryBucket }}
        secure: false
        region: ignored-for-minio
      redirect:
        disable: true
      delete:
        enabled: true
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
        readonly:
          enabled: false
    http:
      addr: :{{ .Values.registry.port }}
      relativeurls: true
      headers:
        X-Content-Type-Options: [nosniff]
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
  production.js: |
    module.exports = {
      minio: {
        endPoint: '{{ include "bailo.minio.host" . }}',
        port: {{ .Values.minio.service.ports.api }},
        useSSL: false,
        region: '',
        uploadBucket: '{{ .Values.minio.uploadBucket }}',
        registryBucket: '{{ .Values.minio.registryBucket }}',
      },
    
      registry: {
        host: '{{ .Values.registry.host }}:{{ .Values.registry.port }}',
        insecure: {{ .Values.registry.insecure }},
      },
      redis: {
        host: '{{ include "bailo.redis.host" . }}',
      },
      smtp: {
        host: '{{ .Values.smtp.host }}',
        port: {{ .Values.smtp.port }},
        insecure: {{ .Values.smtp.insecure }},
      },
      openshift: {
        namespace: '{{ .Values.openshift.namespace }}',
        appPublicRoute: '{{ .Values.openshift.appPublicRoute }}',
        dockerPushSecretName: '{{ .Values.openshift.dockerPushSecretName }}',
      },
      mongo: {
          uri: `mongodb://mongodb:${process.env.MONGO_PASSWORD}@{{ include "bailo.mongo.host" . }}:{{ .Values.mongodb.service.port }}/{{ .Values.mongodb.collectionName }}`,
      }
    }
  custom-environment-variables.js: |
    module.exports = {
      minio: {
          accessKey: 'MINIO_ACCESS_KEY',
          secretKey: 'MINIO_SECRET_KEY',
      },
      redis: {
        password: 'REDIS_PASSWORD',
      }
    }
  nginx.conf: |
    worker_processes 1;
    pid     /tmp/nginx.pid; 
    events { worker_connections 1024; }

    http {
        client_body_temp_path /tmp/client_temp;
        proxy_temp_path       /tmp/proxy_temp_path;
        fastcgi_temp_path     /tmp/fastcgi_temp;
        uwsgi_temp_path       /tmp/uwsgi_temp;
        scgi_temp_path        /tmp/scgi_temp;

        upstream host_service {
          server {{ .Chart.Name }}:{{ .Values.service.port }};
        }

        sendfile on;

        map $http_x_userid $req_userid {                                                 
            default   $http_x_userid;                                               
            ""        "user";                                                      
        }

        map $upstream_http_www_authenticate $new_www_authenticate {
            ~(?<pre_auth>.*realm=")(.*?)(?<post_auth>\/api\/v1\/registry_auth".*)   "$pre_auth$scheme://$host:$server_port$post_auth";
            default "";
        }

        server {
            listen {{ .Values.nginx.port }} ssl http2;
            server_name localhost;

            ssl_certificate {{ .Values.nginx.certDir }}/{{ .Values.nginx.certFile }};
            ssl_certificate_key {{ .Values.nginx.certDir }}/{{ .Values.nginx.keyFile }};
        
            ssl_protocols TLSv1.2 TLSv1.1 TLSv1;

            location / {
                # a bunch of boilerplate proxy configuration
                proxy_http_version 1.1;
                proxy_cache_bypass $http_upgrade;

                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;

                proxy_set_header X-Insecure "true";
                proxy_set_header X-UserId $req_userid;
                proxy_set_header X-Email "user@example.com";

                client_max_body_size 0;
                chunked_transfer_encoding on;

                # the real magic is here where we forward requests to the address that the Node.js server is running on
                proxy_pass http://host_service;
            }
            location /v2 {
              proxy_hide_header WWW-Authenticate;
              add_header WWW-Authenticate $new_www_authenticate always;

              proxy_pass         https://{{ .Values.registry.host }}:{{ .Values.registry.port }};
              proxy_redirect     off;
              proxy_set_header   Host $host;
              proxy_set_header   X-Real-IP $remote_addr;
              proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header   X-Forwarded-Host $server_name; 
              proxy_set_header   X-Forwarded-Proto $scheme;
              proxy_read_timeout 900;

              client_max_body_size 0;
              chunked_transfer_encoding on;
          }
        }
    }


